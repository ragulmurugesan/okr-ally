{"version":3,"sources":["utils/constants/okr.constant.js","components/OkrSegment.js","components/NoData.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["OKR_CATEGORY_OPTIONS","OkrSegment","title","nestChildren","useState","show","setShow","className","onClick","map","child","id","NoData","Container","okrData","state","setState","category","setCategory","useEffect","fetch","then","res","json","value","cache","forEach","item","parentId","parent_objective_id","children","push","constructJSON","data","onChange","event","target","option","Object","keys","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAIaA,EAAuB,CAAC,UAAW,QAAS,YAAa,UAAW,SAAU,UAAW,aAAc,cAAe,iBAAkB,mBAAoB,U,OCG1J,SAASC,EAAT,GAA8C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aAGxC,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,sBAAKC,UAAU,oBAAf,UACI,qBAAIA,UAAU,wCAAd,UACI,mBAAGA,UAAWF,EAAO,eAAiB,iBAAkBG,QAAS,kBAAMF,GAASD,MAC/EH,KAEJG,GACG,6BACKF,EAAaM,KAAI,SAAAC,GAAK,OAAI,oBAAmBH,UAAU,yBAA7B,SAAuDG,EAAMR,OAApDQ,EAAMC,YCf/C,SAASC,IACpB,OAAQ,oBAAIL,UAAU,aAAd,2DCDG,SAASM,IAEpB,MAA0BT,mBAAS,CAAEU,QAAS,KAA9C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCZ,mBAAS,WAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KAwBAC,qBAAU,WACNC,MHhCkB,oDGiCbC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OApBG,WAA+B,IAAnBP,EAAkB,uDAAP,GACrCQ,EAAQ,IADoC,uDAAtB,IAErBC,SAAQ,SAAAC,GACT,IAAIhB,EAAKgB,EAAKhB,GACViB,EAAWD,EAAKE,oBAChB3B,EAAQyB,EAAKzB,MACZ0B,EAGIH,EAAMG,IAAWH,EAAMG,GAAUE,SAASC,KAAKJ,GAFnDA,EAAKV,WAAaA,IAAcQ,EAAMd,GAAM,CAAET,MAAOA,EAAO4B,SAAU,QAI/Ed,EAAS,CAAEF,QAASW,IASDO,CAAcR,EAAMS,KAAMhB,QAC9C,CAACA,IAUJ,OACI,qCACI,oBAAIV,UAAU,aAAd,2BACA,qBAAKA,UAAU,aAAf,SACI,wBAAQiB,MAAOP,EAAUiB,SARR,SAACC,GAC1BjB,EAAYiB,EAAMC,OAAOZ,QAOjB,SACKxB,EAAqBS,KAAI,SAAA4B,GAAM,OAAI,wBAAqBb,MAAOa,EAA5B,SAAqCA,GAAxBA,UAIrDC,OAAOC,KAAKxB,EAAMD,SAAS0B,OAAS,EAChC,mCACI,yBAASjC,UAAU,WAAnB,SAEQ+B,OAAOC,KAAKxB,EAAMD,SACbL,KAAI,SAAAmB,GAAQ,OAAI,cAAC3B,EAAD,CAA2BC,MAAOa,EAAMD,QAAQc,GAAU1B,MAAOC,aAAcY,EAAMD,QAAQc,GAAUE,UAAtFF,UAG5C,cAAChB,EAAD,OCpDX6B,MARf,WACE,OACE,qBAAKlC,UAAU,UAAf,SACE,cAACM,EAAD,OCMS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.cba5766e.chunk.js","sourcesContent":["// API url path to fetch the OKR Data\r\nexport const SAMPLE_OKR = 'https://okrcentral.github.io/sample-okrs/db.json';\r\n\r\n// OKR data categories\r\nexport const OKR_CATEGORY_OPTIONS = ['Company', 'Sales', 'Marketing', 'Finance', 'People', 'Product', 'Management', 'Engineering', 'Administration', 'Customer Success', 'Design'];","import React, { useState } from 'react'\r\n\r\n/**\r\n * Segment of the individual OKR object\r\n * @param {*} title Title of the object\r\n * @param {*} nestChildren Children nested within the object\r\n */\r\nexport default function OkrSegment({ title, nestChildren }) {\r\n\r\n    /* Hook to show, hide the segment for the accordion */\r\n    const [show, setShow] = useState(true);\r\n\r\n    return (\r\n        <div className=\"ally-okr__segment\">\r\n            <h3 className=\"ally-okr__segment-title okr-accordion\">\r\n                <i className={show ? 'accordion-up' : 'accordion-down'} onClick={() => setShow(!show)}></i>\r\n                {title}\r\n            </h3>\r\n            {show &&\r\n                <ul>\r\n                    {nestChildren.map(child => <li key={child.id} className=\"ally-okr__segment-item\">{child.title}</li>)}\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n/**\r\n * Component to render when no data to display. \r\n */\r\nexport default function NoData() {\r\n    return (<h3 className=\"txt-center\">Oops! No Data found. Try some other category.</h3>)\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { SAMPLE_OKR, OKR_CATEGORY_OPTIONS } from '../utils/constants/okr.constant';\r\nimport OkrSegment from './OkrSegment';\r\nimport NoData from './NoData'\r\n\r\nexport default function Container() {\r\n\r\n    const [state, setState] = useState({ okrData: {} });\r\n    const [category, setCategory] = useState('Company');\r\n\r\n    /**\r\n     * Method is invoked to construc the object from the data received\r\n     * @param {*} data OKR Data received from API call is passed here\r\n     * @param {*} category Name of the category is received\r\n     */\r\n    const constructJSON = (data = [], category = '') => {\r\n        let cache = {};\r\n        data.forEach(item => {\r\n            let id = item.id;\r\n            let parentId = item.parent_objective_id;\r\n            let title = item.title;\r\n            if (!parentId) {\r\n                (item.category === category) && (cache[id] = { title: title, children: [] });\r\n            }\r\n            else if (cache[parentId]) cache[parentId].children.push(item);\r\n        })\r\n        setState({ okrData: cache });\r\n    }\r\n\r\n    /**\r\n     * Hook - Defined here to be invoked everytime category changes...\r\n     */\r\n    useEffect(() => {\r\n        fetch(SAMPLE_OKR)\r\n            .then(res => res.json())\r\n            .then(value => constructJSON(value.data, category));\r\n    }, [category]);\r\n\r\n    /**\r\n     * Method to handle the category change event - Event Handler\r\n     * @param {*} event Change event is received \r\n     */\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"txt-center\">Ally.io - OKR</h1>\r\n            <div className=\"txt-center\">\r\n                <select value={category} onChange={handleCategoryChange}>\r\n                    {OKR_CATEGORY_OPTIONS.map(option => <option key={option} value={option}>{option}</option>)}\r\n                </select>\r\n            </div>\r\n            {\r\n                Object.keys(state.okrData).length > 0 ?\r\n                    <>\r\n                        <section className=\"ally-okr\">\r\n                            {\r\n                                Object.keys(state.okrData)\r\n                                    .map(parentId => <OkrSegment key={parentId} title={state.okrData[parentId].title} nestChildren={state.okrData[parentId].children} />)\r\n                            }\r\n                        </section>\r\n                    </> : <NoData />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import './App.css';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <div className=\"app-okr\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}